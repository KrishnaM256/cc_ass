Step 1: builtinfunc.l


%{
#include "y.tab.h"
#include <string.h>
%}

%%
[ \t\n]+               ;  // ignore whitespace

[a-zA-Z_][a-zA-Z0-9_]*    { yylval.str = strdup(yytext); return IDENTIFIER; }
[0-9]+(\.[0-9]+)?         { yylval.fval = atof(yytext); return NUMBER; }
\"[^\"]*\"               { yylval.str = strdup(yytext); return STRING; }

"="                     { return '='; }
"("                     { return '('; }
")"                     { return ')'; }
","                     { return ','; }

"sqrt"                  { return SQRT; }
"strlen"                { return STRLEN; }

.                       { return yytext[0]; }

%%
int yywrap() { return 1; }



Step 2: builtinfunc.y 

%{
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

int yylex(void);
int yyerror(const char *s);
%}

%union {
    float fval;
    char* str;
}

%token <str> IDENTIFIER STRING
%token <fval> NUMBER
%token SQRT STRLEN

%start statement

%%

statement:
    IDENTIFIER '=' expression {
        printf("%s = %.2f\n", $1, $3);
        free($1);
    }
    ;

expression:
    SQRT '(' NUMBER ')' {
        $$ = sqrt($3);
    }
    | STRLEN '(' STRING ')' {
        // Remove the double quotes from the string
        int len = strlen($3);
        if ($3[0] == '"' && $3[len - 1] == '"') {
            $3[len - 1] = '\0';  // remove ending quote
            $$ = strlen($3 + 1); // skip starting quote
        } else {
            $$ = 0; // error fallback
        }
        free($3);
    }
    ;

%%

int yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
    return 1;
}

int main() {
    printf("Enter an expression like: u = sqrt(36) or v = strlen(\"pune\")\n");
    return yyparse();
}


yacc -d builtinfunc.y
lex builtinfunc.l
gcc y.tab.c lex.yy.c -lm -o builtinfunc
./builtinfunc
