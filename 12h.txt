# Infix: a = (b*b + c*c) * (p - q - r)
postfix = ['b', 'b', '*', 'c', 'c', '*', '+', 'p', 'q', '-', 'r', '-', '*']

stack = []
temp_count = 1
code = []

def new_temp():
    global temp_count
    temp = f"t{temp_count}"
    temp_count += 1
    return temp

# Generate TAC from postfix
for token in postfix:
    if token.isalnum():  # Operand
        stack.append(token)
    else:  # Operator
        op2 = stack.pop()
        op1 = stack.pop()
        temp = new_temp()
        code.append(f"{temp} = {op1} {token} {op2}")
        stack.append(temp)

# Final result in stack is assigned to 'a'
final_temp = stack.pop()
code.append(f"a = {final_temp}")

# Print Three Address Code
print("Three Address Code:")
for line in code:
    print(line)






# NEW


def precedence(op):
    if op == '+' or op == '-':
        return 1
    if op == '*' or op == '/':
        return 2
    return 0

def infix_to_postfix(expr_tokens):
    stack = []
    output = []
    for token in expr_tokens:
        if token.isalnum():  # Operand
            output.append(token)
        elif token == '(':
            stack.append(token)
        elif token == ')':
            while stack and stack[-1] != '(':
                output.append(stack.pop())
            stack.pop()  # Pop '('
        else:  # Operator
            while stack and precedence(stack[-1]) >= precedence(token):
                output.append(stack.pop())
            stack.append(token)
    while stack:
        output.append(stack.pop())
    return output

def generate_TAC(postfix):
    stack = []
    code = []
    temp_count = 1

    def new_temp():
        nonlocal temp_count
        t = f"t{temp_count}"
        temp_count += 1
        return t

    for token in postfix:
        if token.isalnum():
            stack.append(token)
        else:
            op2 = stack.pop()
            op1 = stack.pop()
            temp = new_temp()
            code.append(f"{temp} = {op1} {token} {op2}")
            stack.append(temp)

    return code, stack.pop()  # Return TAC and final result temp

# --- Main Program ---
expression = input("Enter an expression (e.g., a = (b + c) * (d - e)): ")
expression = expression.replace("=", " = ")
tokens = expression.replace("(", " ( ").replace(")", " ) ").split()

# Extract LHS and RHS
if '=' in tokens:
    assign_index = tokens.index('=')
    lhs = tokens[0]
    rhs_tokens = tokens[assign_index + 1:]
else:
    print("Invalid assignment expression.")
    exit()

# Step 1: Convert RHS to postfix
postfix = infix_to_postfix(rhs_tokens)

# Step 2: Generate TAC from postfix
tac, final_temp = generate_TAC(postfix)

# Step 3: Output TAC
print("\nThree Address Code:")
for line in tac:
    print(line)
print(f"{lhs} = {final_temp}")
