mathfunc.l 


%{
#include "y.tab.h"
#include <string.h>
#include <stdlib.h>
%}

%%
[ \t\n]+                  ;  // ignore whitespace

[a-zA-Z_][a-zA-Z0-9_]*    { yylval.str = strdup(yytext); return IDENTIFIER; }

[0-9]+(\.[0-9]+)?         { yylval.fval = atof(yytext); return NUMBER; }

"pow"                    { return POW; }
"log"                    { return LOG; }

"="                      { return '='; }
","                      { return ','; }
"("                      { return '('; }
")"                      { return ')'; }

"+"                      { return '+'; }
"-"                      { return '-'; }
"*"                      { return '*'; }
"/"                      { return '/'; }

.                        { return yytext[0]; }
%%

int yywrap() { return 1; }



Step 2: mathfunc.y



%{
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

int yylex(void);
int yyerror(const char *s);
%}

%union {
    float fval;
    char* str;
}

%token <str> IDENTIFIER
%token <fval> NUMBER
%token POW LOG

%left '+' '-'
%left '*' '/'
%right UMINUS

%type <fval> expression

%start statement

%%

statement:
    IDENTIFIER '=' expression {
        printf("%s = %.4f\n", $1, $3);
        free($1);
    }
    ;

expression:
      NUMBER                      { $$ = $1; }
    | '-' expression %prec UMINUS { $$ = -$2; }
    | expression '+' expression   { $$ = $1 + $3; }
    | expression '-' expression   { $$ = $1 - $3; }
    | expression '*' expression   { $$ = $1 * $3; }
    | expression '/' expression   { $$ = $1 / $3; }
    | POW '(' expression ',' expression ')' { $$ = pow($3, $5); }
    | LOG '(' expression ')'      { $$ = log($3); }
    | '(' expression ')'          { $$ = $2; }
    ;

%%

int yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
    return 1;
}

int main() {
    printf("Enter an expression like: p = pow(3,2) / log(24)\n");
    return yyparse();
}





yacc -d mathfunc.y
lex mathfunc.l
gcc y.tab.c lex.yy.c -lm -o mathfunc
./mathfunc
